name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: host

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Run tests
#        run: |
#          if [ -f docker-compose.test.yml ]; then
#            docker-compose --file docker-compose.test.yml build
#            docker-compose --file docker-compose.test.yml run sut
#          else
#            docker build . --file Dockerfile
#          fi

  # Push image to GitHub Package Registry and create release with vm370 directory contents
  push:
    # Ensure test job passes before pushing image.
#    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Extract /opt/hercules/vm370 files
        if: startsWith(github.ref, 'refs/tags/')
        run: |
           mkdir -p "${{ runner.temp }}/vm370"
           docker create -ti --name dummy image bash
           docker cp "dummy:/opt/hercules/vm370/vm3350-1.141.cckd" "${{ runner.temp }}/vm370/vm3350-1.141.cckd"
           docker cp "dummy:/opt/hercules/vm370/vm3350-2.241.cckd" "${{ runner.temp }}/vm370/vm3350-2.241.cckd"
           docker cp "dummy:/opt/hercules/vm370/vm3350-3.34f.cckd" "${{ runner.temp }}/vm370/vm3350-3.34f.cckd"
           docker cp "dummy:/opt/hercules/vm370/vm3350-4.440.cckd" "${{ runner.temp }}/vm370/vm3350-4.440.cckd"
           docker cp "dummy:/opt/hercules/vm370/vm3350-5.540.cckd" "${{ runner.temp }}/vm370/vm3350-5.540.cckd"
           docker cp "dummy:/opt/hercules/vm370/vm3350-6.6f0.cckd" "${{ runner.temp }}/vm370/vm3350-6.6f0.cckd"
           docker rm -f dummy
           zip -D -r vm370.zip "${{ runner.temp }}/vm370"
           ls "${{ runner.temp }}/vm370"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./vm370.zip
          asset_name: vm370.zip
          asset_content_type: application/zip

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
